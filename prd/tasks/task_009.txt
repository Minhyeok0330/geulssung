# 태스크 ID: 9
# 제목: 마이페이지(프로필/이력)
# 상태: 대기중 (pending)
# 선행 태스크: 3, 6, 7, 8
# 우선순위: 중간 (medium)
# 설명: 내 글, 추천/구독 이력, 글쓰기 통계, 활동 내역 타임라인을 볼 수 있는 마이페이지 기능을 구현합니다.
# 상세 내용:
1. 프로필 관리:
   - 기본 정보 표시
   - 프로필 이미지
   - 자기소개
   - 활동 통계
   - 설정 관리

2. 글 관리:
   - 내 글 목록
   - 글 형식별 분류
   - 글 상태 관리
   - 글 통계
   - 글 검색/필터링

3. 활동 이력:
   - 좋아요/구독 이력
   - 아카이브 목록
   - 댓글/반론 이력
   - 활동 타임라인
   - 통계 그래프

4. API 엔드포인트 구현:
   - 프로필 조회/수정
   - 글 목록 조회
   - 활동 이력 조회
   - 통계 데이터 조회

예시 마이페이지 통계 엔드포인트:
```javascript
app.get('/api/users/me/stats', authenticate, async (req, res) => {
  try {
    const userId = req.user.id;

    // 글 통계
    const postStats = await Post.findAll({
      where: { author_id: userId },
      attributes: [
        'writing_type',
        'writing_format',
        [sequelize.fn('COUNT', sequelize.col('id')), 'count']
      ],
      group: ['writing_type', 'writing_format']
    });

    // 반응 통계
    const reactionStats = await Reaction.findAll({
      where: { user_id: userId },
      attributes: [
        'type',
        [sequelize.fn('COUNT', sequelize.col('id')), 'count']
      ],
      group: ['type']
    });

    // 아카이브 통계
    const archiveStats = await Archive.findAll({
      where: { user_id: userId },
      attributes: [
        [sequelize.fn('COUNT', sequelize.col('id')), 'total'],
        [sequelize.fn('COUNT', sequelize.fn('DISTINCT', sequelize.col('tags'))), 'unique_tags']
      ]
    });

    // 활동 타임라인
    const timeline = await Post.findAll({
      where: { author_id: userId },
      order: [['created_at', 'DESC']],
      limit: 10,
      include: [{
        model: User,
        attributes: ['id', 'nickname']
      }]
    });

    res.json({
      post_stats: postStats,
      reaction_stats: reactionStats,
      archive_stats: archiveStats[0],
      recent_activity: timeline
    });
  } catch (error) {
    res.status(500).json({ error: '서버 오류' });
  }
});
```

# 테스트 전략:
1. 프로필 관리 테스트
   - 정보 표시/수정
   - 이미지 업로드
   - 설정 변경
   - 권한 검증

2. 글 관리 테스트
   - 목록 조회
   - 필터링/정렬
   - 상태 변경
   - 통계 정확성

3. 활동 이력 테스트
   - 이력 조회
   - 타임라인 정렬
   - 통계 계산
   - 데이터 정합성

4. 성능 테스트
   - 대량 데이터 조회
   - 캐싱 전략
   - 응답 시간
   - 리소스 사용량
