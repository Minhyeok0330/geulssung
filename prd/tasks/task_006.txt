# 태스크 ID: 6
# 제목: 글 작성 및 트리 구조 구현
# 상태: 대기중 (pending)
# 선행 태스크: 1, 2, 3, 5
# 우선순위: 높음 (high)
# 설명: 원글, 반론, 반론에 대한 반론 등 트리 구조를 지원하는 글쓰기 핵심 기능을 구현합니다.
# 상세 내용:
1. 트리 구조 글 작성 시스템:
   - 원글 작성 기능
   - 반론 작성 기능
   - 반론에 대한 반론 작성 기능
   - 최대 3단계 깊이 제한
   - 반론에 대한 반론은 원글 작성자만 가능

2. 글 조회 시스템:
   - 단일 글 조회
   - 트리 구조 전체 조회
   - 필터링 및 정렬 기능
     * 최신순
     * 인기순
     * 형식별
     * 작성자별

3. 트리 구조 데이터 처리:
   - 부모-자식 관계 관리
   - 깊이 계산 및 제한
   - 트리 구조 시각화 데이터 생성
   - 캐싱 전략

4. API 엔드포인트 구현:
   - 글 작성/수정/삭제
   - 트리 구조 조회
   - 필터링 및 정렬
   - 페이지네이션

예시 트리 구조 조회 엔드포인트:
```javascript
app.get('/api/posts/:id/tree', async (req, res) => {
  try {
    const postId = req.params.id;
    
    // 원글 조회
    const originalPost = await Post.findByPk(postId, {
      include: [{
        model: User,
        attributes: ['id', 'nickname']
      }]
    });

    if (!originalPost) {
      return res.status(404).json({ error: '글을 찾을 수 없습니다.' });
    }

    // 반론 및 반론에 대한 반론 조회
    const rebuttals = await Post.findAll({
      where: { parent_post_id: postId },
      include: [{
        model: User,
        attributes: ['id', 'nickname']
      }]
    });

    const counterRebuttals = await Post.findAll({
      where: { 
        parent_post_id: {
          [Op.in]: rebuttals.map(r => r.id)
        }
      },
      include: [{
        model: User,
        attributes: ['id', 'nickname']
      }]
    });

    // 트리 구조 데이터 생성
    const treeData = {
      original: originalPost,
      rebuttals: rebuttals.map(rebuttal => ({
        ...rebuttal.toJSON(),
        counterRebuttals: counterRebuttals
          .filter(cr => cr.parent_post_id === rebuttal.id)
      }))
    };

    res.json(treeData);
  } catch (error) {
    res.status(500).json({ error: '서버 오류' });
  }
});
```

# 테스트 전략:
1. 트리 구조 작성 테스트
   - 원글 작성
   - 반론 작성
   - 반론에 대한 반론 작성
   - 깊이 제한 검증
   - 작성자 권한 검증

2. 트리 구조 조회 테스트
   - 단일 글 조회
   - 전체 트리 조회
   - 필터링/정렬
   - 페이지네이션

3. 데이터 정합성 테스트
   - 부모-자식 관계
   - 깊이 계산
   - 작성자 정보

4. 성능 테스트
   - 대량 데이터 조회
   - 캐싱 효과
   - 응답 시간
