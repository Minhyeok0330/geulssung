# 태스크 ID: 6
# 제목: AI 피드백 연동
# 상태: 대기중 (pending)
# 선행 태스크: 2, 5
# 우선순위: 높음 (high)
# 설명: GPT API와 연동하여 글의 정치/젠더/중립성 등 성향 피드백을 제공합니다.
# 상세 내용:
1. OpenAI API 연동 설정:
   - API 키 및 환경변수 설정
   - API 통신용 서비스 생성

2. 글 분석 로직 구현:
   - 글 내용을 GPT API에 프롬프트와 함께 전송
   - 응답에서 political_score, gender_score, neutrality 추출
   - 점수 기반 해석 문구 생성
   - 피드백을 DB에 저장

3. 피드백 조회 엔드포인트 구현:
   - 특정 글의 피드백 조회
   - 글 상세 조회 시 피드백 포함

예시 GPT 프롬프트 구조:
```javascript
async function analyzePost(postContent) {
  try {
    const response = await openai.createCompletion({
      model: "gpt-4",
      prompt: `다음 글을 분석하여 0~100점 척도로 점수를 반환하세요:\n1. 정치 성향 (0: 매우 진보, 50: 중립, 100: 매우 보수)\n2. 젠더 성향 (0: 여성 편향, 50: 중립, 100: 남성 편향)\n3. 중립성 (0: 매우 편향/주관적, 100: 완전 중립/객관적)\n\n각 점수에 대한 간단한 해석 문구도 함께 제공하세요.\n\n분석할 글: "${postContent}"\n\n아래와 같은 JSON 형식으로 응답하세요:\n{\n  "political_score": number,\n  "gender_score": number,\n  "neutrality": number,\n  "feedback": "string"\n}`,
      max_tokens: 500,
      temperature: 0.7
    });
    // 응답 파싱
    const feedbackJson = JSON.parse(response.choices[0].text.trim());
    return feedbackJson;
  } catch (error) {
    console.error('글 분석 중 오류:', error);
    throw error;
  }
}
```

글 작성 후 자동 분석 트리거용 웹훅 예시:
```javascript
app.post('/api/posts', authenticate, async (req, res) => {
  // ... 기존 글 작성 로직 ...
  // AI 분석 비동기 트리거
  analyzePostAndStoreFeedback(post.id, post.content);
  res.status(201).json(post);
});

async function analyzePostAndStoreFeedback(postId, content) {
  try {
    const feedbackData = await analyzePost(content);
    await Feedback.create({
      post_id: postId,
      political_score: feedbackData.political_score,
      gender_score: feedbackData.gender_score,
      neutrality: feedbackData.neutrality,
      feedback_json: JSON.stringify(feedbackData),
      created_at: new Date()
    });
  } catch (error) {
    console.error('피드백 저장 중 오류:', error);
  }
}
```

# 테스트 전략:
1. 샘플 글로 GPT API 연동 테스트
2. 점수 계산 및 해석 문구 생성 검증
3. API 오류 발생 시 에러 처리 테스트
4. 피드백 DB 저장 확인
5. 피드백 조회 엔드포인트 테스트
6. 응답 속도 벤치마크 및 캐싱 적용 여부 검토
