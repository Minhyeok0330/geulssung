# 태스크 ID: 13
# 제목: 마이페이지(프로필 및 이력) UI
# 상태: 대기중 (pending)
# 선행 태스크: 8, 9, 11, 12
# 우선순위: 보통 (medium)
# 설명: 사용자 프로필, 글 이력, 피드백 이력, 반응 이력 등 마이페이지 UI를 구현합니다.
# 상세 내용:
1. 프로필 페이지 컴포넌트 구현:
   - 사용자 정보 헤더(구독 버튼 포함)
   - 통계 요약(글 수, 팔로워 등)
   - 평균 피드백 점수 시각화

2. 탭 네비게이션 구현:
   - 사용자의 글 목록
   - 좋아요한 글 목록
   - 구독/팔로잉 목록
   - 팔로워 목록

3. 이력 시각화 구현:
   - 글 활동 타임라인
   - 피드백 점수 변화 추이

예시 프로필 페이지 컴포넌트:
```jsx
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import api from '../services/api';
import FollowButton from '../components/FollowButton';
import FeedbackScoreChart from '../components/FeedbackScoreChart';
import PostList from '../components/PostList';
import UserList from '../components/UserList';

const ProfilePage = () => {
  const { userId } = useParams();
  const [profile, setProfile] = useState(null);
  const [activeTab, setActiveTab] = useState('posts');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const response = await api.get(`/api/users/${userId}/profile`);
        setProfile(response.data);
      } catch (err) {
        setError('프로필 불러오기에 실패했습니다.');
      } finally {
        setLoading(false);
      }
    };
    fetchProfile();
  }, [userId]);
  if (loading) return <div>프로필 불러오는 중...</div>;
  if (error) return <div className="error-message">{error}</div>;
  if (!profile) return null;
  const { user, stats } = profile;
  return (
    <div className="profile-page">
      <div className="profile-header">
        <div className="user-info">
          <h1>{user.nickname}</h1>
          <p>{new Date(user.created_at).toLocaleDateString()} 가입</p>
          <FollowButton authorId={user.id} initialFollowing={false} />
        </div>
        <div className="stats-summary">
          <div className="stat-item">
            <span className="stat-value">{stats.totalPosts}</span>
            <span className="stat-label">글</span>
          </div>
          <div className="stat-item">
            <span className="stat-value">{stats.followers}</span>
            <span className="stat-label">팔로워</span>
          </div>
          <div className="stat-item">
            <span className="stat-value">{stats.following}</span>
            <span className="stat-label">구독</span>
          </div>
        </div>
      </div>
      <div className="feedback-summary">
        <h2>글쓰기 성향</h2>
        <FeedbackScoreChart scores={stats.avgFeedback} />
      </div>
      <div className="profile-tabs">
        <nav className="tab-navigation">
          <button 
            className={activeTab === 'posts' ? 'active' : ''}
            onClick={() => setActiveTab('posts')}
          >
            글
          </button>
          <button 
            className={activeTab === 'liked' ? 'active' : ''}
            onClick={() => setActiveTab('liked')}
          >
            좋아요
          </button>
          <button 
            className={activeTab === 'following' ? 'active' : ''}
            onClick={() => setActiveTab('following')}
          >
            구독
          </button>
          <button 
            className={activeTab === 'followers' ? 'active' : ''}
            onClick={() => setActiveTab('followers')}
          >
            팔로워
          </button>
        </nav>
        <div className="tab-content">
          {activeTab === 'posts' && (
            <PostList userId={user.id} type="authored" />
          )}
          {activeTab === 'liked' && (
            <PostList userId={user.id} type="liked" />
          )}
          {activeTab === 'following' && (
            <UserList userId={user.id} type="following" />
          )}
          {activeTab === 'followers' && (
            <UserList userId={user.id} type="followers" />
          )}
        </div>
      </div>
    </div>
  );
};

export default ProfilePage;
```

# 테스트 전략:
1. 다양한 사용자로 프로필 로딩 테스트
2. 탭 네비게이션 및 콘텐츠 전환 동작 확인
3. 통계 정보 정확성 검증
4. 피드백 시각화 다양한 점수 패턴 테스트
5. 프로필 컴포넌트 반응형 디자인 테스트
6. 구독 버튼이 현재 사용자에 따라 올바르게 동작하는지 검증
