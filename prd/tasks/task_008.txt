# 태스크 ID: 8
# 제목: 아카이빙 시스템
# 상태: 대기중 (pending)
# 선행 태스크: 1, 2, 3, 6
# 우선순위: 중간 (medium)
# 설명: 글 아카이빙, 태그 시스템, 검색 및 필터링 기능을 구현합니다.
# 상세 내용:
1. 아카이빙 시스템:
   - 글 아카이빙 기능
   - 아카이브 해제 기능
   - 아카이브 목록 조회
   - 아카이브 날짜 관리
   - 아카이브 통계

2. 태그 시스템:
   - 태그 생성 및 관리
   - 글에 태그 추가/제거
   - 태그별 글 목록 조회
   - 인기 태그 추천
   - 태그 자동 추출

3. 검색 및 필터링:
   - 전체 텍스트 검색
   - 태그 기반 필터링
   - 형식별 필터링
   - 날짜 범위 필터링
   - 검색 결과 정렬

4. API 엔드포인트 구현:
   - 아카이브 토글
   - 태그 관리
   - 검색 및 필터링
   - 통계 조회

예시 아카이브 토글 엔드포인트:
```javascript
app.post('/api/archives/toggle', authenticate, async (req, res) => {
  try {
    const { post_id } = req.body;
    const userId = req.user.id;

    // 입력값 검증
    if (!post_id) {
      return res.status(400).json({ error: '글 ID가 필요합니다.' });
    }

    // 글 존재 여부 확인
    const post = await Post.findByPk(post_id);
    if (!post) {
      return res.status(404).json({ error: '글을 찾을 수 없습니다.' });
    }

    // 기존 아카이브 확인
    const existingArchive = await Archive.findOne({
      where: {
        post_id,
        user_id: userId
      }
    });

    if (existingArchive) {
      // 아카이브 해제
      await existingArchive.destroy();
      res.json({ status: 'unarchived' });
    } else {
      // 새 아카이브 생성
      const archive = await Archive.create({
        post_id,
        user_id: userId,
        archive_date: new Date(),
        tags: [], // 초기 태그는 빈 배열
        created_at: new Date()
      });
      res.json({ status: 'archived', archive });
    }
  } catch (error) {
    res.status(500).json({ error: '서버 오류' });
  }
});
```

# 테스트 전략:
1. 아카이빙 기능 테스트
   - 아카이브 추가/해제
   - 아카이브 목록 조회
   - 날짜 관리
   - 통계 정확성

2. 태그 시스템 테스트
   - 태그 생성/삭제
   - 태그 추가/제거
   - 태그 검색
   - 자동 추출

3. 검색 및 필터링 테스트
   - 텍스트 검색
   - 필터링 조합
   - 정렬 기능
   - 페이지네이션

4. 성능 테스트
   - 대량 데이터 검색
   - 인덱스 효과
   - 캐싱 전략
   - 응답 시간
