# 태스크 ID: 3
# 제목: 회원 인증 시스템
# 상태: 대기중 (pending)
# 선행 태스크: 1, 2
# 우선순위: 높음 (high)
# 설명: 회원가입, 로그인, 세션 관리 기능을 구현합니다.
# 상세 내용:
1. 회원가입 엔드포인트 구현:
   - 이메일 형식 및 중복 여부 검증
   - 닉네임 중복 여부 검증
   - 비밀번호 안전하게 해싱(bcrypt)
   - 사용자 정보를 DB에 저장

2. 로그인 엔드포인트 구현:
   - 자격 증명 확인
   - JWT 토큰 또는 세션 발급
   - 사용자 정보와 토큰 반환

3. 인증 미들웨어 구현:
   - JWT 토큰 또는 세션 검증
   - 요청 객체에 사용자 정보 부착

4. 비밀번호 재설정 기능 구현(MVP 선택):
   - 재설정 토큰 생성
   - 이메일로 재설정 링크 발송
   - 토큰 검증 및 비밀번호 변경

5. 사용자 프로필 엔드포인트 구현:
   - 내 프로필 조회
   - 내 프로필 수정

예시 회원가입 엔드포인트:
```javascript
app.post('/api/users/register', async (req, res) => {
  try {
    const { email, nickname, password } = req.body;
    // 입력값 검증
    if (!email || !nickname || !password) {
      return res.status(400).json({ error: '모든 필드를 입력해야 합니다.' });
    }
    // 이메일/닉네임 중복 확인
    const existingUser = await User.findOne({ where: { [Op.or]: [{ email }, { nickname }] } });
    if (existingUser) {
      return res.status(400).json({ error: '이미 사용 중인 이메일 또는 닉네임입니다.' });
    }
    // 비밀번호 해싱
    const hashedPassword = await bcrypt.hash(password, 10);
    // 사용자 생성
    const user = await User.create({
      email,
      nickname,
      password_hash: hashedPassword
    });
    // 토큰 발급
    const token = jwt.sign({ id: user.id }, process.env.JWT_SECRET, { expiresIn: '7d' });
    res.status(201).json({ user: { id: user.id, email: user.email, nickname: user.nickname }, token });
  } catch (error) {
    res.status(500).json({ error: '서버 오류' });
  }
});
```

# 테스트 전략:
1. 올바른/잘못된 데이터로 회원가입 테스트
2. 올바른/잘못된 자격 증명으로 로그인 테스트
3. 토큰 검증 및 만료 테스트
4. 비밀번호 해싱 보안성 확인
5. 이메일/닉네임 고유값 제약 테스트
6. 인증 미들웨어의 정상/비정상 토큰 처리 테스트
7. 비밀번호 재설정 플로우 테스트(구현 시)
