# 태스크 ID: 8
# 제목: 마이페이지(프로필 및 이력)
# 상태: 대기중 (pending)
# 선행 태스크: 3, 5, 6, 7
# 우선순위: 보통 (medium)
# 설명: 사용자의 마이페이지에서 글 이력, 피드백 이력, 반응(좋아요/구독) 이력을 확인할 수 있는 기능을 구현합니다.
# 상세 내용:
1. 마이페이지(프로필) 관련 엔드포인트 구현:
   - 기본 정보 포함 사용자 프로필 조회
   - 사용자의 글 목록(페이지네이션)
   - 사용자의 피드백 이력 조회
   - 사용자의 좋아요/구독 이력 조회

2. 사용자 통계 계산:
   - 글 단계별(원글, 반론, 반론에 대한 반론) 개수 집계
   - 평균 피드백 점수 계산
   - 시간 흐름에 따른 성장 추적

3. 개인 피드(추천/구독) 엔드포인트 구현:
   - 구독 중인 작성자의 글 목록 조회
   - 사용자 활동 기반 추천 글 목록 조회

예시 마이페이지(프로필) 엔드포인트:
```javascript
app.get('/api/users/:userId/profile', authenticate, async (req, res) => {
  try {
    const { userId } = req.params;
    // 기본 사용자 정보 조회
    const user = await User.findByPk(userId, {
      attributes: ['id', 'nickname', 'created_at']
    });
    if (!user) {
      return res.status(404).json({ error: '사용자를 찾을 수 없습니다.' });
    }
    // 글 단계별 개수 집계
    const postCounts = await Post.count({
      where: { author_id: userId },
      group: ['depth']
    });
    // 단계별 개수 포맷팅
    const formattedCounts = {
      original: 0,
      rebuttal: 0,
      counterRebuttal: 0
    };
    postCounts.forEach(count => {
      if (count.depth === 0) formattedCounts.original = count.count;
      if (count.depth === 1) formattedCounts.rebuttal = count.count;
      if (count.depth === 2) formattedCounts.counterRebuttal = count.count;
    });
    // 팔로워/팔로잉 수 집계
    const followerCount = await Reaction.count({
      where: { author_id: userId, type: 'follow' }
    });
    const followingCount = await Reaction.count({
      where: { user_id: userId, type: 'follow' }
    });
    // 평균 피드백 점수 계산
    const feedbacks = await Feedback.findAll({
      include: [{
        model: Post,
        where: { author_id: userId },
        attributes: []
      }]
    });
    const avgScores = feedbacks.reduce((acc, feedback) => {
      acc.politicalScore += feedback.political_score;
      acc.genderScore += feedback.gender_score;
      acc.neutrality += feedback.neutrality;
      return acc;
    }, { politicalScore: 0, genderScore: 0, neutrality: 0 });
    const feedbackCount = feedbacks.length;
    if (feedbackCount > 0) {
      avgScores.politicalScore /= feedbackCount;
      avgScores.genderScore /= feedbackCount;
      avgScores.neutrality /= feedbackCount;
    }
    res.status(200).json({
      user,
      stats: {
        posts: formattedCounts,
        totalPosts: formattedCounts.original + formattedCounts.rebuttal + formattedCounts.counterRebuttal,
        followers: followerCount,
        following: followingCount,
        avgFeedback: avgScores
      }
    });
  } catch (error) {
    res.status(500).json({ error: '서버 오류' });
  }
});
```

# 테스트 전략:
1. 다양한 사용자로 프로필 조회 테스트
2. 글 이력 페이지네이션 동작 확인
3. 피드백 이력 조회 테스트
4. 좋아요/구독 이력 조회 테스트
5. 통계 계산 정확성 검증
6. 개인 피드(추천/구독) 콘텐츠 적합성 확인
