# 태스크 ID: 12
# 제목: 반응 UI(좋아요/구독)
# 상태: 대기중 (pending)
# 선행 태스크: 7, 9
# 우선순위: 보통 (medium)
# 설명: 글 좋아요 및 작성자 구독 등 반응 기능을 위한 UI를 구현하며, 캐릭터 기반 애니메이션을 포함합니다.
# 상세 내용:
1. 반응 버튼 컴포넌트 구현:
   - 좋아요 버튼(몽썽이 캐릭터 애니메이션)
   - 구독 버튼(상태 표시 포함)

2. 반응 카운터 구현:
   - 좋아요 수 표시
   - 팔로워 수 표시

3. 반응 목록 구현:
   - 해당 글을 좋아요한 사용자 목록
   - 사용자를 구독/구독한 사용자 목록

예시 좋아요 버튼 컴포넌트:
```jsx
import React, { useState } from 'react';
import { useAuth } from '../contexts/AuthContext';
import api from '../services/api';

const LikeButton = ({ post, initialLikeCount, initialLiked }) => {
  const { user } = useAuth();
  const [liked, setLiked] = useState(initialLiked);
  const [likeCount, setLikeCount] = useState(initialLikeCount);
  const [animating, setAnimating] = useState(false);
  
  const handleLike = async () => {
    if (!user) {
      // 로그인 유도 또는 로그인 모달 표시
      return;
    }
    try {
      const response = await api.post(`/api/reactions/like/${post.id}`);
      const newLiked = response.data.liked;
      // 상태 업데이트
      setLiked(newLiked);
      setLikeCount(prev => newLiked ? prev + 1 : prev - 1);
      // 좋아요 시 애니메이션 트리거
      if (newLiked) {
        setAnimating(true);
        setTimeout(() => setAnimating(false), 1000);
      }
    } catch (error) {
      console.error('좋아요 토글 중 오류:', error);
    }
  };
  
  return (
    <div className="like-container">
      <button 
        className={`like-button ${liked ? 'liked' : ''}`}
        onClick={handleLike}
        aria-label={liked ? '좋아요 취소' : '좋아요'}
      >
        <div className="character-container">
          <img 
            src={`/images/mongsseong-${liked ? 'active' : 'inactive'}.png`} 
            alt="몽썽이" 
            className={animating ? 'animating' : ''}
          />
        </div>
        <span className="like-count">{likeCount}</span>
      </button>
    </div>
  );
};

export default LikeButton;
```

예시 구독 버튼 컴포넌트:
```jsx
import React, { useState } from 'react';
import { useAuth } from '../contexts/AuthContext';
import api from '../services/api';

const FollowButton = ({ authorId, initialFollowing }) => {
  const { user } = useAuth();
  const [following, setFollowing] = useState(initialFollowing);
  const [loading, setLoading] = useState(false);
  
  const handleFollow = async () => {
    if (!user) {
      // 로그인 유도 또는 로그인 모달 표시
      return;
    }
    // 자기 자신 구독 방지
    if (user.id === authorId) {
      return;
    }
    setLoading(true);
    try {
      const response = await api.post(`/api/reactions/follow/${authorId}`);
      setFollowing(response.data.following);
    } catch (error) {
      console.error('구독 토글 중 오류:', error);
    } finally {
      setLoading(false);
    }
  };
  // 내 프로필에서는 구독 버튼 미노출
  if (user && user.id === authorId) {
    return null;
  }
  return (
    <button 
      className={`follow-button ${following ? 'following' : ''}`}
      onClick={handleFollow}
      disabled={loading}
    >
      {following ? '구독 중' : '구독'}
    </button>
  );
};

export default FollowButton;
```

# 테스트 전략:
1. 좋아요 버튼 동작 및 애니메이션 테스트
2. 구독 버튼 상태 변화 검증
3. 좋아요/구독 수 실시간 반영 테스트
4. 캐릭터 애니메이션 정상 동작 확인
5. 사용자 상호작용 흐름(로그인 유도 등) 테스트
6. 자기 자신 구독 방지 검증
