# 태스크 ID: 10
# 제목: 글 작성 및 조회 UI
# 상태: 대기중 (pending)
# 선행 태스크: 5, 9
# 우선순위: 높음 (high)
# 설명: 글 작성 및 조회, 트리 구조 시각화 등 글 관련 UI를 구현합니다.
# 상세 내용:
1. 글 작성 에디터 컴포넌트 구현:
   - 리치 텍스트 에디터(Draft.js, Quill 등) 연동
   - 주제 선택 또는 표시
   - 제출 버튼(로딩 상태 포함)

2. 글 조회 컴포넌트 구현:
   - 개별 글 카드
   - 글 상세 보기
   - 스레드 트리 구조 시각화

3. 글 목록 뷰 구현:
   - 최신 글 피드
   - 주제별 글 목록
   - 내 글 목록

4. 반론 UI 구현:
   - 글에 '반론 작성' 버튼
   - 원글 참조 반론 에디터
   - 반론에 대한 반론 UI(원글 작성자만 가능)

5. 캐릭터 기반 UI 요소 추가:
   - 글썽이(원글용)
   - 말썽이(반론용)

예시 글 작성 에디터 컴포넌트:
```jsx
import React, { useState } from 'react';
import { useAuth } from '../contexts/AuthContext';
import api from '../services/api';
import RichTextEditor from '../components/RichTextEditor';

const PostEditor = ({ topic, parentPostId, onPostCreated }) => {
  const { user } = useAuth();
  const [content, setContent] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!content.trim()) {
      setError('내용을 입력하세요.');
      return;
    }
    setLoading(true);
    setError(null);
    try {
      const postData = {
        content,
        ...(parentPostId ? { parent_post_id: parentPostId } : { topic })
      };
      const response = await api.post('/api/posts', postData);
      setContent('');
      if (onPostCreated) {
        onPostCreated(response.data);
      }
    } catch (err) {
      setError(err.response?.data?.error || '글 작성에 실패했습니다.');
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <div className="post-editor">
      <div className="editor-header">
        {parentPostId ? (
          <div className="rebuttal-indicator">
            <img src="/images/malsseong.png" alt="말썽이" />
            <span>반론을 작성하세요</span>
          </div>
        ) : (
          <div className="original-post-indicator">
            <img src="/images/geulsseong.png" alt="글썽이" />
            <span>오늘의 불씨: {topic}</span>
          </div>
        )}
      </div>
      <RichTextEditor value={content} onChange={setContent} />
      {error && <div className="error-message">{error}</div>}
      <button 
        className="submit-button" 
        onClick={handleSubmit} 
        disabled={loading || !content.trim()}
      >
        {loading ? '작성 중...' : '글 작성'}
      </button>
    </div>
  );
};

export default PostEditor;
```

예시 글 트리 시각화:
```jsx
import React, { useState, useEffect } from 'react';
import api from '../services/api';
import PostCard from './PostCard';

const PostThread = ({ postId }) => {
  const [thread, setThread] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  useEffect(() => {
    const fetchThread = async () => {
      try {
        const response = await api.get(`/api/posts/${postId}/thread`);
        setThread(response.data);
      } catch (err) {
        setError('스레드 불러오기에 실패했습니다.');
      } finally {
        setLoading(false);
      }
    };
    fetchThread();
  }, [postId]);
  if (loading) return <div>스레드 불러오는 중...</div>;
  if (error) return <div className="error-message">{error}</div>;
  if (!thread) return null;
  return (
    <div className="post-thread">
      <div className="original-post">
        <PostCard post={thread.originalPost} showActions />
      </div>
      {thread.rebuttals.length > 0 && (
        <div className="rebuttals">
          <h3>반론</h3>
          {thread.rebuttals.map(rebuttal => (
            <div key={rebuttal.id} className="rebuttal-container">
              <div className="rebuttal">
                <PostCard post={rebuttal} showActions />
              </div>
              {rebuttal.counterRebuttals.length > 0 && (
                <div className="counter-rebuttals">
                  {rebuttal.counterRebuttals.map(counterRebuttal => (
                    <div key={counterRebuttal.id} className="counter-rebuttal">
                      <PostCard post={counterRebuttal} showActions={false} />
                    </div>
                  ))}
                </div>
              )}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default PostThread;
```

# 테스트 전략:
1. 다양한 유형의 글 작성 테스트
2. 반론 작성 및 연결 동작 확인
3. 다양한 스레드 구조에서 트리 시각화 테스트
4. 캐릭터 UI 요소 정상 노출 확인
5. 글 관련 컴포넌트 반응형 디자인 테스트
6. 반론에 대한 반론이 원글 작성자에게만 노출되는지 검증
