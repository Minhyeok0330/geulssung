# 태스크 ID: 7
# 제목: 반응(좋아요/구독) 시스템
# 상태: 대기중 (pending)
# 선행 태스크: 1, 2, 3, 5
# 우선순위: 보통 (medium)
# 설명: 글에 좋아요를 누르거나 작성자를 구독할 수 있는 반응 시스템을 구현합니다.
# 상세 내용:
1. 반응(좋아요/구독) 관련 엔드포인트 구현:
   - 글 좋아요/취소
   - 작성자 구독/구독 취소
   - 특정 글의 좋아요 목록 조회
   - 특정 작성자의 팔로워 목록 조회
   - 사용자가 좋아요한 글 목록 조회
   - 사용자가 구독 중인 작성자 목록 조회

2. 반응 토글 로직 구현:
   - 이미 반응이 존재하는지 확인 후 생성
   - 토글 해제 시 반응 삭제

3. 글/사용자 엔드포인트에 반응 수 포함

예시 좋아요 토글 엔드포인트:
```javascript
app.post('/api/reactions/like/:postId', authenticate, async (req, res) => {
  try {
    const { postId } = req.params;
    const userId = req.user.id;
    // 글 존재 여부 확인
    const post = await Post.findByPk(postId);
    if (!post) {
      return res.status(404).json({ error: '글을 찾을 수 없습니다.' });
    }
    // 이미 좋아요했는지 확인
    const existingLike = await Reaction.findOne({
      where: {
        user_id: userId,
        post_id: postId,
        type: 'like'
      }
    });
    if (existingLike) {
      // 좋아요 취소
      await existingLike.destroy();
      return res.status(200).json({ liked: false });
    } else {
      // 좋아요 추가
      await Reaction.create({
        user_id: userId,
        post_id: postId,
        author_id: post.author_id,
        type: 'like',
        created_at: new Date()
      });
      return res.status(201).json({ liked: true });
    }
  } catch (error) {
    res.status(500).json({ error: '서버 오류' });
  }
});
```

예시 구독 토글 엔드포인트:
```javascript
app.post('/api/reactions/follow/:authorId', authenticate, async (req, res) => {
  try {
    const { authorId } = req.params;
    const userId = req.user.id;
    // 자기 자신 구독 방지
    if (authorId === userId) {
      return res.status(400).json({ error: '자기 자신은 구독할 수 없습니다.' });
    }
    // 작성자 존재 여부 확인
    const author = await User.findByPk(authorId);
    if (!author) {
      return res.status(404).json({ error: '작성자를 찾을 수 없습니다.' });
    }
    // 이미 구독했는지 확인
    const existingFollow = await Reaction.findOne({
      where: {
        user_id: userId,
        author_id: authorId,
        type: 'follow'
      }
    });
    if (existingFollow) {
      // 구독 취소
      await existingFollow.destroy();
      return res.status(200).json({ following: false });
    } else {
      // 구독 추가
      await Reaction.create({
        user_id: userId,
        post_id: null,
        author_id: authorId,
        type: 'follow',
        created_at: new Date()
      });
      return res.status(201).json({ following: true });
    }
  } catch (error) {
    res.status(500).json({ error: '서버 오류' });
  }
});
```

# 테스트 전략:
1. 좋아요/취소 기능 테스트
2. 구독/구독 취소 기능 테스트
3. 반응 수 집계 정확성 검증
4. 좋아요한 글/구독한 작성자 목록 조회 테스트
5. 자기 자신 구독 방지 테스트
6. 대량 반응 데이터 성능 테스트
