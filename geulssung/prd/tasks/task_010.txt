# 태스크 ID: 10
# 제목: 프론트엔드 세팅 및 인증 UI
# 상태: 대기중 (pending)
# 선행 태스크: 2, 3
# 우선순위: 높음 (high)
# 설명: 프론트엔드 프로젝트를 세팅하고, 인증 관련 UI 컴포넌트를 구현합니다.
# 상세 내용:
1. 프로젝트 초기화:
   - Next.js 프로젝트 설정
   - TypeScript 설정
   - ESLint/Prettier 설정
   - 패키지 의존성 관리
   - 환경 변수 설정

2. 기본 구조 설정:
   - 디렉토리 구조
   - 라우팅 설정
   - 상태 관리 설정
   - API 클라이언트 설정
   - 공통 컴포넌트 구조

3. 인증 UI 구현:
   - 회원가입 폼
   - 로그인 폼
   - 비밀번호 재설정
   - 인증 상태 관리
   - 보호된 라우트

4. 기본 레이아웃:
   - 헤더/네비게이션
   - 푸터
   - 반응형 디자인
   - 테마 시스템
   - 로딩 상태

예시 인증 컨텍스트:
```typescript
// contexts/AuthContext.tsx
import { createContext, useContext, useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import axios from 'axios';

interface User {
  id: number;
  email: string;
  nickname: string;
}

interface AuthContextType {
  user: User | null;
  loading: boolean;
  login: (email: string, password: string) => Promise<void>;
  register: (email: string, nickname: string, password: string) => Promise<void>;
  logout: () => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const router = useRouter();

  useEffect(() => {
    checkAuth();
  }, []);

  const checkAuth = async () => {
    try {
      const token = localStorage.getItem('token');
      if (token) {
        const response = await axios.get('/api/users/me', {
          headers: { Authorization: `Bearer ${token}` }
        });
        setUser(response.data);
      }
    } catch (error) {
      localStorage.removeItem('token');
    } finally {
      setLoading(false);
    }
  };

  const login = async (email: string, password: string) => {
    const response = await axios.post('/api/auth/login', { email, password });
    const { token, user } = response.data;
    localStorage.setItem('token', token);
    setUser(user);
    router.push('/');
  };

  const register = async (email: string, nickname: string, password: string) => {
    const response = await axios.post('/api/auth/register', { email, nickname, password });
    const { token, user } = response.data;
    localStorage.setItem('token', token);
    setUser(user);
    router.push('/');
  };

  const logout = () => {
    localStorage.removeItem('token');
    setUser(null);
    router.push('/login');
  };

  return (
    <AuthContext.Provider value={{ user, loading, login, register, logout }}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}
```

# 테스트 전략:
1. 프로젝트 설정 테스트
   - 빌드 프로세스
   - 타입 체크
   - 린트 규칙
   - 환경 변수

2. 인증 기능 테스트
   - 회원가입
   - 로그인
   - 토큰 관리
   - 보호된 라우트

3. UI 컴포넌트 테스트
   - 폼 검증
   - 에러 처리
   - 반응형 디자인
   - 접근성

4. 성능 테스트
   - 초기 로딩
   - 번들 크기
   - 렌더링 성능
   - 메모리 사용량
