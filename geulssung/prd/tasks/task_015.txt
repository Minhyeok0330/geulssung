# 태스크 ID: 15
# 제목: 캐릭터 기반 UI 및 애니메이션
# 상태: 대기중 (pending)
# 선행 태스크: 9, 10, 11, 12
# 우선순위: 낮음 (low)
# 설명: 글썽이, 말썽이, 몽썽이 등 캐릭터 기반 UI 요소와 애니메이션을 구현합니다.
# 상세 내용:
1. 캐릭터 에셋 라이브러리 구축:
   - 캐릭터 일러스트 디자인 또는 소싱
   - 각 캐릭터별 애니메이션 프레임 제작
   - 캐릭터/상태별 에셋 정리
   - 반응형 크기 조정
   - 최적화

2. 캐릭터 컴포넌트 구현:
   - 글썽이(원글/글쓰기)
   - 말썽이(반론)
   - 몽썽이(좋아요)
   - 상태 관리
   - 애니메이션 제어

3. 애니메이션 시스템 구현:
   - 상태 기반 애니메이션(idle, active 등)
   - 전환 애니메이션
   - 상호작용 피드백
   - 성능 최적화
   - 접근성

4. 캐릭터 연동 포인트 구현:
   - 글 작성 UI
   - 피드백 표시
   - 반응(좋아요/구독) 버튼
   - 빈 상태/로딩 화면
   - 에러 상태

예시 캐릭터 컴포넌트:
```typescript
// components/Character.tsx
import React, { useState, useEffect } from 'react';
import './Character.css';

interface CharacterProps {
  type: 'geulsseong' | 'malsseong' | 'mongsseong';
  state: string;
  animate?: boolean;
  size?: 'small' | 'medium' | 'large';
}

const Character: React.FC<CharacterProps> = ({
  type,
  state,
  animate = false,
  size = 'medium'
}) => {
  const [currentFrame, setCurrentFrame] = useState(0);
  const [isAnimating, setIsAnimating] = useState(false);

  // 캐릭터별 애니메이션 정보 매핑
  const characterConfig = {
    geulsseong: {
      baseUrl: '/images/characters/geulsseong',
      states: {
        idle: { frames: 4, speed: 400 },
        thinking: { frames: 6, speed: 300 },
        writing: { frames: 8, speed: 200 },
        happy: { frames: 5, speed: 250 }
      }
    },
    malsseong: {
      baseUrl: '/images/characters/malsseong',
      states: {
        idle: { frames: 4, speed: 400 },
        talking: { frames: 6, speed: 250 },
        arguing: { frames: 7, speed: 200 },
        thinking: { frames: 5, speed: 300 }
      }
    },
    mongsseong: {
      baseUrl: '/images/characters/mongsseong',
      states: {
        idle: { frames: 3, speed: 500 },
        liking: { frames: 8, speed: 150 },
        happy: { frames: 5, speed: 250 }
      }
    }
  };

  const config = characterConfig[type];
  if (!config) return null;

  const stateConfig = config.states[state] || config.states.idle;

  // 애니메이션 처리
  useEffect(() => {
    if (animate && stateConfig.frames > 1) {
      setIsAnimating(true);
      const interval = setInterval(() => {
        setCurrentFrame(prev => (prev + 1) % stateConfig.frames);
      }, stateConfig.speed);
      return () => clearInterval(interval);
    } else {
      setIsAnimating(false);
      setCurrentFrame(0);
    }
  }, [animate, state, stateConfig.frames, stateConfig.speed]);

  const imageSrc = `${config.baseUrl}/${state}/${currentFrame + 1}.png`;

  return (
    <div 
      className={`character ${type} ${state} ${size} ${isAnimating ? 'animating' : ''}`}
      role="img"
      aria-label={`${type} ${state}`}
    >
      <img 
        src={imageSrc} 
        alt={`${type} ${state}`}
        loading="lazy"
      />
    </div>
  );
};

export default Character;
```

예시 글 작성 에디터에서의 사용:
```typescript
// components/PostEditor.tsx
import React, { useState } from 'react';
import Character from './Character';

const PostEditor: React.FC = () => {
  const [content, setContent] = useState('');

  return (
    <div className="post-editor">
      <div className="post-editor-header">
        <Character 
          type="geulsseong" 
          state={content.length > 0 ? 'writing' : 'thinking'} 
          animate={content.length > 0}
          size="small"
        />
        <h3>오늘의 주제에 대한 생각을 나눠보세요</h3>
      </div>
      
      <textarea
        value={content}
        onChange={(e) => setContent(e.target.value)}
        placeholder="여기에 글을 작성하세요..."
      />
    </div>
  );
};

export default PostEditor;
```

# 테스트 전략:
1. 캐릭터 렌더링 테스트
   - 상태별 표시
   - 크기 조정
   - 이미지 로딩
   - 최적화

2. 애니메이션 테스트
   - 프레임 전환
   - 타이밍
   - 성능
   - 메모리 사용

3. 상호작용 테스트
   - 상태 변경
   - 이벤트 처리
   - 피드백
   - 접근성

4. 통합 테스트
   - 컴포넌트 연동
   - 상태 관리
   - 성능
   - 사용자 경험
